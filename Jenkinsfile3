pipeline {
    agent any
    environment {
        IMAGE = "bookmyshow"
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout Code') {
            steps {
                // reuse the checkout that obtained the Jenkinsfile
                checkout scm
            }
        }
        stage('Verify Tools') {
            steps {
                // debug: show node & npm versions available to the Jenkins agent
                sh 'echo "Running as: $(whoami)"; node -v || true; npm -v || true; docker --version || true'
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        stage('Docker Build & Push') {
            steps {
                script {
                    // credentialsId must match the Jenkins credential you created
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'saundarya143', passwordVariable: 'docker-key')]) {
                        sh 'echo $docker-key | docker login -u $saundarya143 --password-stdin'
                        sh "docker build -t $saundarya143/${IMAGE}:latest ."
                        sh "docker push $saundarya143/${IMAGE}:latest"
                    }
                }
            }
        }
        stage('Deploy to Docker') {
            steps {
                script {
                    sh '''
                    # stop any existing container from same image (safe stop)
                    docker ps -q --filter "ancestor=$saundarya143/${IMAGE}:latest" | xargs -r docker stop || true
                    docker run -d --rm --name bookmyshow -p 3000:3000 $saundarya143/${IMAGE}:latest
                    '''
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline finished: ${currentBuild.currentResult}"
        }
    }
}
